name: Update GitHub Stats

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-stats:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'nicholasjano'
    steps:
      - name: Check GitHub API Rate Limits
        id: rate_limit
        run: |
          RATE_LIMIT=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/rate_limit" | jq '.rate.remaining')
          if [ "$RATE_LIMIT" -lt 100 ]; then
            echo "GitHub API rate limit too low: $RATE_LIMIT"
            exit 1
          fi

      - name: Calculate date one month ago (EST)
        id: datecalc
        run: |
          export TZ="America/New_York"

          # Get today's date in EST
          TODAY=$(TZ="America/New_York" date +"%Y-%m-%d")

          # Extract components
          YEAR=$(date -d "$TODAY" +"%Y")
          MONTH=$(date -d "$TODAY" +"%m")
          DAY=$(date -d "$TODAY" +"%d")

          # Compute the previous month
          if [ "$MONTH" -eq 01 ]; then
            PREV_MONTH=12
            PREV_YEAR=$((YEAR - 1))
          else
            PREV_MONTH=$((10#$MONTH - 1))
            PREV_YEAR=$YEAR
          fi

          # Format previous month as two digits
          PREV_MONTH=$(printf "%02d" $PREV_MONTH)

          # Find last day of the previous month
          LAST_DAY_OF_PREV_MONTH=$(date -d "$PREV_YEAR-$PREV_MONTH-01 +1 month -1 day" +"%d")

          # Determine the correct day to use
          if [ "$DAY" -gt "$LAST_DAY_OF_PREV_MONTH" ]; then
            FINAL_DAY=$LAST_DAY_OF_PREV_MONTH
          else
            FINAL_DAY=$DAY
          fi

          # Construct the final date in ISO 8601 format
          ONE_MONTH_AGO=$(date -d "$PREV_YEAR-$PREV_MONTH-$FINAL_DAY 00:00:00 UTC" +"%Y-%m-%dT00:00:00Z")

          echo "Computed one_month_ago: $ONE_MONTH_AGO"
          echo "one_month_ago=$ONE_MONTH_AGO" >> $GITHUB_OUTPUT

      - name: Install Octokit
        run: npm install @octokit/core @octokit/plugin-paginate-graphql

      - name: Fetch GitHub Stats (Total Commits, Unique Repos, New Solutions)
        id: fetch_stats
        run: |
          node <<EOF
          const { Octokit } = require("@octokit/core");
          const { paginateGraphQL } = require("@octokit/plugin-paginate-graphql");

          const MyOctokit = Octokit.plugin(paginateGraphQL);
          const octokit = new MyOctokit({ auth: process.env.PAT_TOKEN });

          (async () => {
            const dateQuery = "${{ steps.datecalc.outputs.one_month_ago }}";
            const currentDate = new Date().toISOString();

            const query = `
              query paginate($cursor: String) {
                user(login: "nicholasjano") {
                  contributionsCollection(from: "${dateQuery}", to: "${currentDate}") {
                    totalCommitContributions
                    commitContributionsByRepository {
                      repository {
                        id
                      }
                    }
                  }
                }
                repository(owner: "nicholasjano", name: "Leetcode-Solutions") {
                  defaultBranchRef {
                    target {
                      ... on Commit {
                        history(first: 100, since: "${dateQuery}", after: $cursor) {
                          nodes {
                            message
                            author {
                              user {
                                login
                              }
                            }
                          }
                          pageInfo {
                            hasNextPage
                            endCursor
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            let newSolutionCount = 0;

            const response = await octokit.graphql.paginate(query);

            // Extract commit messages only authored by "nicholasjano"
            const commits = response.repository.defaultBranchRef.target.history.nodes.filter(commit =>
              commit.author?.user?.login === "nicholasjano" &&
              /new/i.test(commit.message) && /solution/i.test(commit.message)
            );

            newSolutionCount = commits.length;

            const totalCommits = response.user.contributionsCollection.totalCommitContributions;
            const uniqueRepos = response.user.contributionsCollection.commitContributionsByRepository.length;

            console.log("Total commits:", totalCommits);
            console.log("Unique repositories:", uniqueRepos);
            console.log("New solution commits:", newSolutionCount);

            // Store values as GitHub Action outputs
            console.log(`::set-output name=total_commits::${totalCommits}`);
            console.log(`::set-output name=unique_repos::${uniqueRepos}`);
            console.log(`::set-output name=new_solution_commits::${newSolutionCount}`);
          })();
          EOF
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Create stats JSON file
        run: |
          echo "{" > stats.json
          echo "  \"totalCommitsPastMonth\": \"${{ steps.fetch_stats.outputs.total_commits }}\"," >> stats.json
          echo "  \"uniqueRepositoriesPastMonth\": \"${{ steps.fetch_stats.outputs.unique_repos }}\"," >> stats.json
          echo "  \"newSolutionCommits\": \"${{ steps.fetch_stats.outputs.new_solution_commits }}\"" >> stats.json
          echo "}" >> stats.json

      - name: Install AWS CLI
        run: |
          pip install awscli || exit 1

      - name: Upload stats.json to R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
        run: |
          # Check if file exists
          if [ ! -f stats.json ]; then
            echo "Error: stats.json file not found"
            exit 1
          fi

          # Check if file is valid JSON
          if ! jq empty stats.json 2>/dev/null; then
            echo "Error: stats.json is not valid JSON"
            exit 1
          fi

          # Attempt upload with retries
          for i in {1..3}; do
            if aws s3 cp stats.json s3://${R2_BUCKET}/stats.json \
              --endpoint-url ${R2_ENDPOINT} \
              --cache-control "no-store, no-cache" \
              --content-type "application/json"; then
              echo "Successfully uploaded stats.json to R2"
              exit 0
            else
              echo "Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

          echo "Error: Failed to upload stats.json after 3 attempts"
          exit 1
