name: Update GitHub Stats

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-stats:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'nicholasjano'
    steps:
      - name: Check GitHub API Rate Limits
        id: rate_limit
        run: |
          RATE_LIMIT=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/rate_limit" | jq '.rate.remaining')
          if [ "$RATE_LIMIT" -lt 100 ]; then
            echo "GitHub API rate limit too low: $RATE_LIMIT"
            exit 1
          fi

      - name: Calculate date one month ago (EST)
        id: datecalc
        run: |
          export TZ="America/New_York"

          # Get today's date in EST
          TODAY=$(TZ="America/New_York" date +"%Y-%m-%d")

          # Extract components
          YEAR=$(date -d "$TODAY" +"%Y")
          MONTH=$(date -d "$TODAY" +"%m")
          DAY=$(date -d "$TODAY" +"%d")

          # Compute the previous month
          if [ "$MONTH" -eq 01 ]; then
            PREV_MONTH=12
            PREV_YEAR=$((YEAR - 1))
          else
            PREV_MONTH=$((10#$MONTH - 1))
            PREV_YEAR=$YEAR
          fi

          # Format previous month as two digits
          PREV_MONTH=$(printf "%02d" $PREV_MONTH)

          # Find last day of the previous month
          LAST_DAY_OF_PREV_MONTH=$(date -d "$PREV_YEAR-$PREV_MONTH-01 +1 month -1 day" +"%d")

          # Determine the correct day to use
          if [ "$DAY" -gt "$LAST_DAY_OF_PREV_MONTH" ]; then
            FINAL_DAY=$LAST_DAY_OF_PREV_MONTH
          else
            FINAL_DAY=$DAY
          fi

          # Construct the final date in ISO 8601 format
          ONE_MONTH_AGO=$(date -d "$PREV_YEAR-$PREV_MONTH-$FINAL_DAY 00:00:00 UTC" +"%Y-%m-%dT00:00:00Z")

          echo "Computed one_month_ago: $ONE_MONTH_AGO"
          echo "one_month_ago=$ONE_MONTH_AGO" >> $GITHUB_OUTPUT

      - name: Fetch GitHub Stats (Total Commits, Unique Repos, New Solutions)
        id: fetch_stats
        run: |
          DATE_QUERY=${{ steps.datecalc.outputs.one_month_ago }}
          CURRENT_DATE=$(date -u +"%Y-%m-%dT00:00:00Z")

          # Initialize cursor and pagination variables
          CURSOR="null"
          NEW_SOLUTION_COUNT=0

          while :; do
            # Construct query with pagination
            QUERY=$(jq -n --arg date_query "$DATE_QUERY" --arg current_date "$CURRENT_DATE" --arg cursor "$CURSOR" '
              {
                query: "query {
                  user(login: \"nicholasjano\") {
                    contributionsCollection(from: \($date_query), to: \($current_date)) {
                      totalCommitContributions
                      commitContributionsByRepository {
                        repository {
                          id
                        }
                      }
                    }
                  }
                  repository(owner: \"nicholasjano\", name: \"Leetcode-Solutions\") {
                    defaultBranchRef {
                      target {
                        ... on Commit {
                          history(first: 100, since: \($date_query), after: " \($cursor) ") {
                            pageInfo {
                              hasNextPage
                              endCursor
                            }
                            nodes {
                              message
                              author {
                                user {
                                  login
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }"
              }')

            RESPONSE=$(curl -s -X POST -H "Authorization: bearer ${{ secrets.PAT_TOKEN }}" \
              -H "Content-Type: application/json" \
              https://api.github.com/graphql \
              -d "$QUERY")

            echo "Raw response:"
            echo "$RESPONSE"

            # Check for errors
            if [[ $(echo "$RESPONSE" | jq -r 'if has("errors") then .errors[0].message else empty end') ]]; then
              echo "Error: $(echo "$RESPONSE" | jq -r '.errors[0].message')"
              exit 1
            fi

            # Extract commit messages authored only by nicholasjano
            PAGE_COUNT=$(echo "$RESPONSE" | jq '[.data.repository.defaultBranchRef.target.history.nodes[]
              | select(.author.user.login == "nicholasjano")
              | select(.message | test("new"; "i") and test("solution"; "i"))] | length')

            NEW_SOLUTION_COUNT=$((NEW_SOLUTION_COUNT + PAGE_COUNT))

            # Get pagination info
            HAS_NEXT_PAGE=$(echo "$RESPONSE" | jq '.data.repository.defaultBranchRef.target.history.pageInfo.hasNextPage')
            CURSOR=$(echo "$RESPONSE" | jq -r '.data.repository.defaultBranchRef.target.history.pageInfo.endCursor')

            # Stop if there are no more pages
            if [[ "$HAS_NEXT_PAGE" != "true" || "$CURSOR" == "null" ]]; then
              break
            fi
          done

          # Extract values for total commits & unique repos
          TOTAL_COMMITS=$(echo "$RESPONSE" | jq '.data.user.contributionsCollection.totalCommitContributions')
          UNIQUE_REPOS=$(echo "$RESPONSE" | jq '.data.user.contributionsCollection.commitContributionsByRepository | length')

          echo "Total commits: $TOTAL_COMMITS"
          echo "Unique repositories: $UNIQUE_REPOS"
          echo "Final count of new solution commits: $NEW_SOLUTION_COUNT"

          # Store values in GitHub Actions outputs
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "unique_repos=$UNIQUE_REPOS" >> $GITHUB_OUTPUT
          echo "new_solution_commits=$NEW_SOLUTION_COUNT" >> $GITHUB_OUTPUT

      - name: Create stats JSON file
        run: |
          echo "{" > stats.json
          echo "  \"totalCommitsPastMonth\": \"${{ steps.fetch_stats.outputs.total_commits }}\"," >> stats.json
          echo "  \"uniqueRepositoriesPastMonth\": \"${{ steps.fetch_stats.outputs.unique_repos }}\"," >> stats.json
          echo "  \"newSolutionCommits\": \"${{ steps.fetch_stats.outputs.new_solution_commits }}\"" >> stats.json
          echo "}" >> stats.json

      - name: Install AWS CLI
        run: |
          pip install awscli || exit 1

      - name: Upload stats.json to R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
        run: |
          # Check if file exists
          if [ ! -f stats.json ]; then
            echo "Error: stats.json file not found"
            exit 1
          fi

          # Check if file is valid JSON
          if ! jq empty stats.json 2>/dev/null; then
            echo "Error: stats.json is not valid JSON"
            exit 1
          fi

          # Attempt upload with retries
          for i in {1..3}; do
            if aws s3 cp stats.json s3://${R2_BUCKET}/stats.json \
              --endpoint-url ${R2_ENDPOINT} \
              --cache-control "no-store, no-cache" \
              --content-type "application/json"; then
              echo "Successfully uploaded stats.json to R2"
              exit 0
            else
              echo "Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

          echo "Error: Failed to upload stats.json after 3 attempts"
          exit 1
