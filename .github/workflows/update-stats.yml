name: Update GitHub Stats

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-stats:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'nicholasjano'
    steps:
      - name: Check GitHub API Rate Limits
        id: rate_limit
        run: |
          RATE_LIMIT=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/rate_limit" | jq '.rate.remaining')
          if [ "$RATE_LIMIT" -lt 100 ]; then
            exit 1
          fi

      - name: Calculate date one month ago (EST)
        id: datecalc
        run: |
          export TZ="America/New_York"
          TODAY=$(date +"%Y-%m-%d")
          YEAR=$(date +"%Y")
          MONTH=$(date +"%m")
          DAY=$(date +"%d")
          MONTH_NUM=$(echo $MONTH | sed 's/^0*//')
          DAY_NUM=$(echo $DAY | sed 's/^0*//')
          if [ "$MONTH_NUM" -eq 1 ]; then
            PREV_MONTH=12
            PREV_YEAR=$((YEAR - 1))
          else
            PREV_MONTH=$((MONTH_NUM - 1))
            PREV_YEAR=$YEAR
          fi
          PREV_MONTH=$(printf "%02d" $PREV_MONTH)
          LAST_DAY=$(date -d "$PREV_YEAR-$PREV_MONTH-01 +1 month -1 day" +"%d")
          LAST_DAY_NUM=$(echo $LAST_DAY | sed 's/^0*//')
          if [ "$DAY_NUM" -gt "$LAST_DAY_NUM" ]; then
            DAY_NUM=$LAST_DAY_NUM
          fi
          DAY_NUM=$(printf "%02d" $DAY_NUM)
          ONE_MONTH_AGO=$(date -d "${PREV_YEAR}-${PREV_MONTH}-${DAY_NUM}" +"%m/%d/%y")
          echo "one_month_ago=$ONE_MONTH_AGO" >> $GITHUB_OUTPUT

      - name: Fetch total commits (past month, any repository)
        id: total_commits
        run: |
          DATE_QUERY=${{ steps.datecalc.outputs.one_month_ago }}
          echo "Date query: $DATE_QUERY"
          QUERY='query($query: String!) {
            search(query: $query, type: COMMIT, first: 1) {
              commitCount
            }
          }'
          
          RESPONSE=$(curl -s -X POST -H "Authorization: bearer ${{ secrets.PAT_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d "{\"query\":\"$QUERY\",\"variables\":{\"query\":\"author:nicholasjano author-date:>=$DATE_QUERY\"}}")
          
          # Check for errors in response
          if [[ $(echo "$RESPONSE" | jq -r 'if has("errors") then .errors[0].message else empty end') ]]; then
            echo "Error: $(echo "$RESPONSE" | jq -r '.errors[0].message')"
            exit 1
          fi
          
          TOTAL_COMMITS=$(echo "$RESPONSE" | jq '.data.search.commitCount')
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT

          echo "Raw response:"
          echo "$RESPONSE"

      - name: Fetch unique repositories for commits (past month)
        id: unique_repos
        run: |
          DATE_QUERY=${{ steps.datecalc.outputs.one_month_ago }}
          QUERY='query($query: String!) {
            search(query: $query, type: COMMIT, first: 1) {
              repositoryCount
            }
          }'
          
          RESPONSE=$(curl -s -X POST -H "Authorization: bearer ${{ secrets.PAT_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d "{\"query\":\"$QUERY\",\"variables\":{\"query\":\"author:nicholasjano author-date:>=$DATE_QUERY\"}}")
          
          # Check for errors in response
          if [[ $(echo "$RESPONSE" | jq -r 'if has("errors") then .errors[0].message else empty end') ]]; then
            echo "Error: $(echo "$RESPONSE" | jq -r '.errors[0].message')"
            exit 1
          fi
          
          UNIQUE_REPOS=$(echo "$RESPONSE" | jq '.data.search.repositoryCount')
          echo "unique_repos=$UNIQUE_REPOS" >> $GITHUB_OUTPUT

      - name: Fetch 'New Solution' commits from Leetcode-Solutions repo (past month)
        id: new_solution_commits
        run: |
          DATE_QUERY=${{ steps.datecalc.outputs.one_month_ago }}
          QUERY='query($query: String!) {
            search(query: $query, type: COMMIT, first: 1) {
              commitCount
            }
          }'
          
          RESPONSE=$(curl -s -X POST -H "Authorization: bearer ${{ secrets.PAT_TOKEN }}" \
            -H "Content-Type: application/json" \
            https://api.github.com/graphql \
            -d "{\"query\":\"$QUERY\",\"variables\":{\"query\":\"repo:nicholasjano/Leetcode-Solutions message:new message:solution author-date:>=$DATE_QUERY\"}}")
          
          # Check for errors in response
          if [[ $(echo "$RESPONSE" | jq -r 'if has("errors") then .errors[0].message else empty end') ]]; then
            echo "Error: $(echo "$RESPONSE" | jq -r '.errors[0].message')"
            exit 1
          fi
          
          NEW_SOLUTION_COUNT=$(echo "$RESPONSE" | jq '.data.search.commitCount')
          echo "new_solution_commits=$NEW_SOLUTION_COUNT" >> $GITHUB_OUTPUT

      - name: Debug outputs
        run: |
          echo "=== DEBUG START ==="
          echo "one_month_ago: ${{ steps.datecalc.outputs.one_month_ago }}"
          echo "total_commits: ${{ steps.total_commits.outputs.total_commits }}"
          echo "unique_repos: ${{ steps.unique_repos.outputs.unique_repos }}"
          echo "new_solution_commits: ${{ steps.new_solution_commits.outputs.new_solution_commits }}"
          echo "=== DEBUG END ==="       

      - name: Create stats JSON file
        run: |
          echo "{" > stats.json
          echo "  \"totalCommitsPastMonth\": ${{ steps.total_commits.outputs.total_commits }}," >> stats.json
          echo "  \"uniqueRepositoriesPastMonth\": ${{ steps.unique_repos.outputs.unique_repos }}," >> stats.json
          echo "  \"newSolutionCommits\": ${{ steps.new_solution_commits.outputs.new_solution_commits }}" >> stats.json
          echo "}" >> stats.json

      - name: Install AWS CLI
        run: |
          pip install awscli || exit 1

      - name: Upload stats.json to R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
        run: |
          # Check if file exists
          if [ ! -f stats.json ]; then
            echo "Error: stats.json file not found"
            exit 1
          fi

          # Check if file is valid JSON
          if ! jq empty stats.json 2>/dev/null; then
            echo "Error: stats.json is not valid JSON"
            exit 1
          fi

          # Attempt upload with retries
          for i in {1..3}; do
            if aws s3 cp stats.json s3://${R2_BUCKET}/stats.json \
              --endpoint-url ${R2_ENDPOINT} \
              --cache-control "no-store, no-cache" \
              --content-type "application/json"; then
              echo "Successfully uploaded stats.json to R2"
              exit 0
            else
              echo "Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done

          echo "Error: Failed to upload stats.json after 3 attempts"
          exit 1