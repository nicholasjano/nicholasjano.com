name: Update GitHub Stats

on:
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  update-stats:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'nicholasjano'
    steps:
      - name: Check GitHub API Rate Limits
        id: rate_limit
        run: |
          RATE_LIMIT=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/rate_limit" | jq '.rate.remaining')
          if [ "$RATE_LIMIT" -lt 100 ]; then
            exit 1
          fi

      - name: Calculate date one month ago (EST)
        id: datecalc
        run: |
          export TZ="America/New_York"
          TODAY=$(date +"%Y-%m-%d")
          YEAR=$(date +"%Y")
          MONTH=$(date +"%m")
          DAY=$(date +"%d")
          MONTH_NUM=$(echo $MONTH | sed 's/^0*//')
          DAY_NUM=$(echo $DAY | sed 's/^0*//')
          if [ "$MONTH_NUM" -eq 1 ]; then
            PREV_MONTH=12
            PREV_YEAR=$((YEAR - 1))
          else
            PREV_MONTH=$((MONTH_NUM - 1))
            PREV_YEAR=$YEAR
          fi
          PREV_MONTH=$(printf "%02d" $PREV_MONTH)
          LAST_DAY=$(date -d "$PREV_YEAR-$PREV_MONTH-01 +1 month -1 day" +"%d")
          LAST_DAY_NUM=$(echo $LAST_DAY | sed 's/^0*//')
          if [ "$DAY_NUM" -gt "$LAST_DAY_NUM" ]; then
            DAY_NUM=$LAST_DAY_NUM
          fi
          DAY_NUM=$(printf "%02d" $DAY_NUM)
          ONE_MONTH_AGO="${PREV_YEAR}-${PREV_MONTH}-${DAY_NUM}"
          echo "one_month_ago=$ONE_MONTH_AGO" >> $GITHUB_OUTPUT

      - name: Fetch total commits (past month, any repository)
        id: total_commits
        run: |
          DATE_QUERY=${{ steps.datecalc.outputs.one_month_ago }}
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github.cloak-preview" \
            "https://api.github.com/search/commits?q=author:nicholasjano+committer-date:>=$DATE_QUERY&per_page=100")
          TOTAL_COMMITS=$(echo "$RESPONSE" | jq '.total_count')
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT

      - name: Fetch unique repositories for commits (past month)
        id: unique_repos
        run: |
          DATE_QUERY=${{ steps.datecalc.outputs.one_month_ago }}
          UNIQUE_REPOS_TEMP_FILE="repos.txt"
          > $UNIQUE_REPOS_TEMP_FILE
          for page in {1..10}; do
              RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                -H "Accept: application/vnd.github.cloak-preview" \
                "https://api.github.com/search/commits?q=author:nicholasjano+committer-date:>=$DATE_QUERY&per_page=100&page=$page")
              ITEM_COUNT=$(echo "$RESPONSE" | jq '.items | length')
              if [ "$ITEM_COUNT" -eq "0" ]; then
                  break
              fi
              echo "$RESPONSE" | jq -r '.items[].repository.full_name' >> $UNIQUE_REPOS_TEMP_FILE
          done
          UNIQUE_COUNT=$(sort -u $UNIQUE_REPOS_TEMP_FILE | wc -l | tr -d ' ')
          echo "unique_repos=$UNIQUE_COUNT" >> $GITHUB_OUTPUT

      - name: Fetch 'New Solution' commits from Leetcode-Solutions repo (past month)
        id: new_solution_commits
        run: |
          DATE_QUERY=${{ steps.datecalc.outputs.one_month_ago }}
          NEW_SOLUTION_COUNT=0
          for page in {1..10}; do
              RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                -H "Accept: application/vnd.github.cloak-preview" \
                "https://api.github.com/search/commits?q=repo:nicholasjano/Leetcode-Solutions+%22New%20Solution%22+in:commit+committer-date:>=$DATE_QUERY&per_page=100&page=$page")
              ITEM_COUNT=$(echo "$RESPONSE" | jq '.items | length')
              if [ "$ITEM_COUNT" -eq "0" ]; then
                  break
              fi
              NEW_SOLUTION_COUNT=$((NEW_SOLUTION_COUNT + ITEM_COUNT))
          done
          echo "new_solution_commits=$NEW_SOLUTION_COUNT" >> $GITHUB_OUTPUT

      - name: Create stats JSON file
        run: |
          echo "{" > stats.json
          echo "  \"totalCommitsPastMonth\": ${{ steps.total_commits.outputs.total_commits }}," >> stats.json
          echo "  \"uniqueRepositoriesPastMonth\": ${{ steps.unique_repos.outputs.unique_repos }}," >> stats.json
          echo "  \"newSolutionCommits\": ${{ steps.new_solution_commits.outputs.new_solution_commits }}" >> stats.json
          echo "}" >> stats.json

      - name: Upload stats.json to GitHub Release
        run: |
          TAG="latest-stats"
          FILE="stats.json"
          REPO="nicholasjano/nicholasjano.com"

          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                        "https://api.github.com/repos/$REPO/releases/tags/$TAG" | jq -r '.id // empty')

          if [ -n "$RELEASE_ID" ]; then
            curl -s -X DELETE -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
                 "https://api.github.com/repos/$REPO/releases/$RELEASE_ID"
          fi

          RELEASE_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               -d "{\"tag_name\":\"$TAG\",\"name\":\"Latest Stats\",\"body\":\"Updated stats.json\",\"draft\":false,\"prerelease\":false}" \
               "https://api.github.com/repos/$REPO/releases")

          NEW_RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')

          curl -s -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
               -H "Content-Type: application/json" \
               --data-binary @"$FILE" \
               "https://uploads.github.com/repos/$REPO/releases/$NEW_RELEASE_ID/assets?name=$FILE"
